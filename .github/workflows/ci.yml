name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

defaults:
  run:
    shell: bash

jobs:
  # Code quality and linting (тільки на PR, не на драфт)
  lint:
    if: ${{ !github.event.pull_request.draft }}
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: Run golint
        run: golint $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest

      - name: Run gofumpt
        run: |
          CHANGED=$(gofumpt -l . | wc -l | tr -d ' ')
          if [ "$CHANGED" != "0" ]; then
            echo "Code is not formatted properly (gofumpt):"
            gofumpt -l .
            exit 1
          fi

  # Test matrix across multiple Go versions and OS (тільки на PR, не на драфт)
  test:
    if: ${{ !github.event.pull_request.draft }}
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.22', '1.23', '1.24']
        exclude:
          - os: windows-latest
            go-version: '1.22'
          - os: macos-latest
            go-version: '1.22'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

      - name: Run tests (race + timeout)
        run: go test -v -race -timeout=5m $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

  # Build (тільки на PR, не на драфт)
  build:
    if: ${{ !github.event.pull_request.draft }}
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: go build -v $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

  # Dependency check (тільки на PR, не на драфт)
  dependency-check:
    if: ${{ !github.event.pull_request.draft }}
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck $(go list ./... | grep -v '^github.com/sarff/iSlogger/examples')

      - name: Verify no external dependencies
        run: |
          DEPS=$(go list -m all | grep -v "github.com/sarff/iSlogger" | grep -v "^golang.org/toolchain" | wc -l | tr -d ' ')
          if [ "$DEPS" -gt 1 ]; then
            echo "❌ Found external dependencies:"
            go list -m all
            exit 1
          fi
          echo "✅ No external dependencies found"